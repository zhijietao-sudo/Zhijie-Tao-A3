{"artwork":null,"bars":20,"bpm":60,"collaborative":false,"color":"#5bc6fc","created":"2025-10-10 13:34:06.340000","deleted":false,"description":"","gadget-details":[{"beats":56,"color":"#2f9aef","created":"2025-10-10 13:36:10.061000","deleted":false,"description":"","id":864588,"idata":{"author":"Anonymous","cloned":false,"displayOrder":1,"editor-theme":"tunepad-dark","gain":1,"hasError":false,"midi-input":false,"midi-output":false,"minimized":false,"pan":0,"patchId":11,"python":"from tunepad.constants import *  # Import constants for beat durations\nfrom tunepad.chords import *     # Import chord functions\nimport random                    # For variation in notes and rhythms\n\n# Function to set mood-specific parameters\ndef set_mood_params(mood):\n    if mood.lower() == 'angry':  # Case-insensitive check\n        chords = [[60, 63, 67], [65, 68, 72], [67, 71, 74], [60, 63, 66], [60, 64, 68]]  # Minor/dissonant chords\n        scale = [60, 62, 63, 65, 67, 68, 70, 72]                                     # C minor scale\n        volume = 127                                                                 # Max volume for intensity\n        drum_intensity = 110                                                         # High drum intensity\n    return chords, scale, volume, drum_intensity\n\n# Set mood and unpack parameters\nmood = 'angry'\nchords, scale, volume, drum_intensity = set_mood_params(mood)\n\n# User guidance prints\nprint(\"Playing Angry Mood Music - Ultra intense & chaotic version...\")\nprint(\"Set UI BPM to 140, Instrument to 'distorted guitar' for melody/harmony, and 'rock kit' for drums!\")\n\n# Main loop for composition (40 iterations for ~20-30s music)\nfor i in range(40):\n    beat_in_measure = i % 4  # Track beat position\n    \n    # Dynamic drum intensity with wider variation for chaos\n    current_drum_intensity = drum_intensity + random.randint(-30, 17)\n    \n    # Drums: Bass on downbeats or randomly\n    if beat_in_measure == 0 or beat_in_measure == 2 or random.random() > 0.6:\n        playNote(36, beats=EIGHTH_NOTE / 2, velocity=current_drum_intensity, sustain=0.15)\n    \n    # Snare bursts on off-beats or randomly\n    if beat_in_measure == 1 or beat_in_measure == 3 or random.random() > 0.7:\n        for _ in range(random.randint(1, 3)):  # Multiple hits for aggression\n            playNote(38, beats=SIXTEENTH_NOTE / 2, velocity=current_drum_intensity * 0.95, sustain=0.05)\n    \n    # Crash or hi-hat for accents\n    if i % 8 == 0 or random.random() > 0.8:\n        playNote(49, beats=QUARTER_NOTE, velocity=127, sustain=0.5)  # Crash cymbal\n    else:\n        playNote(42, beats=SIXTEENTH_NOTE, velocity=current_drum_intensity * 0.85, sustain=0.1)  # Hi-hat\n    \n    # Melody: Base note with large offset for tension\n    base_note_index = i % len(scale)\n    note_offset = random.randint(-24, 24)\n    note = scale[base_note_index] + 12 + note_offset\n    \n    # Random dissonant shifts\n    if random.random() > 0.7:\n        note += random.choice([-1, 6, 8])\n    \n    # Short, rapid durations\n    duration = random.choice([SIXTEENTH_NOTE / 2, SIXTEENTH_NOTE])\n    current_volume = volume * random.uniform(0.8, 1.0)\n    playNote(note, beats=duration, velocity=current_volume, sustain=0.2)\n    \n    # Harmony: Chords on downbeats or randomly with bursts\n    if beat_in_measure == 0 or random.random() > 0.5:\n        chord_notes = random.choice(chords)\n        burst_volume = 127 if random.random() > 0.7 else volume * 0.9\n        playNote(chord_notes, beats=EIGHTH_NOTE, velocity=burst_volume, sustain=0.4)\n    \n    # Rare short rests for unpredictability\n    if random.random() > 0.95:\n        rest(SIXTEENTH_NOTE / 4)\n    else:\n        rest(0)\n    \n    # Debug print every 10 loops\n    if i % 10 == 0:\n        print(\"Loop %d: Current playhead ~%.1f beats\" % (i, getPlayhead()))\n\n# Completion print\nprint(\"Finished! Final playhead: %.1f beats\" % getPlayhead())\n","show-editor":true,"show-instrument":true,"show-notation":true,"show-output":false,"show-timeline":true},"instrument":"drums","modified":"2025-10-21 05:56:58.559000","name":"angry_Drums","public":false,"remix_parent":null,"version":"2.0","voice":"piano"},{"beats":56,"color":"#2f9aef","created":"2025-10-12 10:12:46.899000","deleted":false,"description":"","id":864984,"idata":{"author":"Anonymous","cloned":false,"displayOrder":2,"editor-theme":"tunepad-dark","gain":1,"hasError":false,"midi-input":false,"midi-output":false,"minimized":false,"pan":0,"patchId":9,"python":"from tunepad.constants import *  # Import constants for beat durations\nfrom tunepad.chords import *     # Import chord functions\nimport random                    # For variation in notes and rhythms\n\n# Function to set mood-specific parameters\ndef set_mood_params(mood):\n    if mood.lower() == 'angry':  # Case-insensitive check\n        chords = [[60, 63, 67], [65, 68, 72], [67, 71, 74], [60, 63, 66], [60, 64, 68]]  # Minor/dissonant chords\n        scale = [60, 62, 63, 65, 67, 68, 70, 72]                                     # C minor scale\n        volume = 127                                                                 # Max volume for intensity\n        drum_intensity = 110                                                         # High drum intensity\n    return chords, scale, volume, drum_intensity\n\n# Set mood and unpack parameters\nmood = 'angry'\nchords, scale, volume, drum_intensity = set_mood_params(mood)\n\n# User guidance prints\nprint(\"Playing Angry Mood Music - Ultra intense & chaotic version...\")\nprint(\"Set UI BPM to 140, Instrument to 'distorted guitar' for melody/harmony, and 'rock kit' for drums!\")\n\n# Main loop for composition (40 iterations for ~20-30s music)\nfor i in range(40):\n    beat_in_measure = i % 4  # Track beat position\n    \n    # Dynamic drum intensity with wider variation for chaos\n    current_drum_intensity = drum_intensity + random.randint(-30, 17)\n    \n    # Drums: Bass on downbeats or randomly\n    if beat_in_measure == 0 or beat_in_measure == 2 or random.random() > 0.6:\n        playNote(36, beats=EIGHTH_NOTE / 2, velocity=current_drum_intensity, sustain=0.15)\n    \n    # Snare bursts on off-beats or randomly\n    if beat_in_measure == 1 or beat_in_measure == 3 or random.random() > 0.7:\n        for _ in range(random.randint(1, 3)):  # Multiple hits for aggression\n            playNote(38, beats=SIXTEENTH_NOTE / 2, velocity=current_drum_intensity * 0.95, sustain=0.05)\n    \n    # Crash or hi-hat for accents\n    if i % 8 == 0 or random.random() > 0.8:\n        playNote(49, beats=QUARTER_NOTE, velocity=127, sustain=0.5)  # Crash cymbal\n    else:\n        playNote(42, beats=SIXTEENTH_NOTE, velocity=current_drum_intensity * 0.85, sustain=0.1)  # Hi-hat\n    \n    # Melody: Base note with large offset for tension\n    base_note_index = i % len(scale)\n    note_offset = random.randint(-24, 24)\n    note = scale[base_note_index] + 12 + note_offset\n    \n    # Random dissonant shifts\n    if random.random() > 0.7:\n        note += random.choice([-1, 6, 8])\n    \n    # Short, rapid durations\n    duration = random.choice([SIXTEENTH_NOTE / 2, SIXTEENTH_NOTE])\n    current_volume = volume * random.uniform(0.8, 1.0)\n    playNote(note, beats=duration, velocity=current_volume, sustain=0.2)\n    \n    # Harmony: Chords on downbeats or randomly with bursts\n    if beat_in_measure == 0 or random.random() > 0.5:\n        chord_notes = random.choice(chords)\n        burst_volume = 127 if random.random() > 0.7 else volume * 0.9\n        playNote(chord_notes, beats=EIGHTH_NOTE, velocity=burst_volume, sustain=0.4)\n    \n    # Rare short rests for unpredictability\n    if random.random() > 0.95:\n        rest(SIXTEENTH_NOTE / 4)\n    else:\n        rest(0)\n    \n    # Debug print every 10 loops\n    if i % 10 == 0:\n        print(\"Loop %d: Current playhead ~%.1f beats\" % (i, getPlayhead()))\n\n# Completion print\nprint(\"Finished! Final playhead: %.1f beats\" % getPlayhead())\n","show-editor":true,"show-instrument":true,"show-notation":true,"show-output":false,"show-timeline":true},"instrument":"piano","modified":"2025-10-19 10:09:31.955000","name":"angry_Piano","public":false,"remix_parent":null,"version":"2.0","voice":"piano"},{"beats":56,"color":"#2f9aef","created":"2025-10-12 10:14:43.755000","deleted":false,"description":"","id":864985,"idata":{"author":"Anonymous","cloned":false,"displayOrder":3,"editor-theme":"tunepad-dark","gain":1,"hasError":false,"midi-input":false,"midi-output":false,"minimized":false,"pan":0,"patchId":2,"python":"from tunepad.constants import *  # Import constants for beat durations\nfrom tunepad.chords import *     # Import chord functions\nimport random                    # For variation in notes and rhythms\n\n# Function to set mood-specific parameters\ndef set_mood_params(mood):\n    if mood.lower() == 'angry':  # Case-insensitive check\n        chords = [[60, 63, 67], [65, 68, 72], [67, 71, 74], [60, 63, 66], [60, 64, 68]]  # Minor/dissonant chords\n        scale = [60, 62, 63, 65, 67, 68, 70, 72]                                     # C minor scale\n        volume = 127                                                                 # Max volume for intensity\n        drum_intensity = 110                                                         # High drum intensity\n    return chords, scale, volume, drum_intensity\n\n# Set mood and unpack parameters\nmood = 'angry'\nchords, scale, volume, drum_intensity = set_mood_params(mood)\n\n# User guidance prints\nprint(\"Playing Angry Mood Music - Ultra intense & chaotic version...\")\nprint(\"Set UI BPM to 140, Instrument to 'distorted guitar' for melody/harmony, and 'rock kit' for drums!\")\n\n# Main loop for composition (40 iterations for ~20-30s music)\nfor i in range(40):\n    beat_in_measure = i % 4  # Track beat position\n    \n    # Dynamic drum intensity with wider variation for chaos\n    current_drum_intensity = drum_intensity + random.randint(-30, 17)\n    \n    # Drums: Bass on downbeats or randomly\n    if beat_in_measure == 0 or beat_in_measure == 2 or random.random() > 0.6:\n        playNote(36, beats=EIGHTH_NOTE / 2, velocity=current_drum_intensity, sustain=0.15)\n    \n    # Snare bursts on off-beats or randomly\n    if beat_in_measure == 1 or beat_in_measure == 3 or random.random() > 0.7:\n        for _ in range(random.randint(1, 3)):  # Multiple hits for aggression\n            playNote(38, beats=SIXTEENTH_NOTE / 2, velocity=current_drum_intensity * 0.95, sustain=0.05)\n    \n    # Crash or hi-hat for accents\n    if i % 8 == 0 or random.random() > 0.8:\n        playNote(49, beats=QUARTER_NOTE, velocity=127, sustain=0.5)  # Crash cymbal\n    else:\n        playNote(42, beats=SIXTEENTH_NOTE, velocity=current_drum_intensity * 0.85, sustain=0.1)  # Hi-hat\n    \n    # Melody: Base note with large offset for tension\n    base_note_index = i % len(scale)\n    note_offset = random.randint(-24, 24)\n    note = scale[base_note_index] + 12 + note_offset\n    \n    # Random dissonant shifts\n    if random.random() > 0.7:\n        note += random.choice([-1, 6, 8])\n    \n    # Short, rapid durations\n    duration = random.choice([SIXTEENTH_NOTE / 2, SIXTEENTH_NOTE])\n    current_volume = volume * random.uniform(0.8, 1.0)\n    playNote(note, beats=duration, velocity=current_volume, sustain=0.2)\n    \n    # Harmony: Chords on downbeats or randomly with bursts\n    if beat_in_measure == 0 or random.random() > 0.5:\n        chord_notes = random.choice(chords)\n        burst_volume = 127 if random.random() > 0.7 else volume * 0.9\n        playNote(chord_notes, beats=EIGHTH_NOTE, velocity=burst_volume, sustain=0.4)\n    \n    # Rare short rests for unpredictability\n    if random.random() > 0.95:\n        rest(SIXTEENTH_NOTE / 4)\n    else:\n        rest(0)\n    \n    # Debug print every 10 loops\n    if i % 10 == 0:\n        print(\"Loop %d: Current playhead ~%.1f beats\" % (i, getPlayhead()))\n\n# Completion print\nprint(\"Finished! Final playhead: %.1f beats\" % getPlayhead())\n","show-editor":true,"show-instrument":true,"show-notation":true,"show-output":false,"show-timeline":true},"instrument":"guitar","modified":"2025-10-19 10:09:37.691000","name":"angry_Guitar","public":false,"remix_parent":null,"version":"2.0","voice":"piano"}],"id":116481,"import_export_version":1,"meter":"4/4","modified":"2025-10-10 13:36:41.977000","name":"emotional_music_angry","preview":null,"pucks":{"key":"C major","owner_id":"0e386bf3-ef4e-416c-86fa-1ccfad2159a8"},"remix_parent":null,"summary":"","tags":[],"tracks":[],"user_id":"0e386bf3-ef4e-416c-86fa-1ccfad2159a8","username":"tzjtzj777@outlook.com","visibility":"private"}