{"artwork":null,"bars":20,"bpm":120,"collaborative":false,"color":"#7999D9","created":"2025-10-10 13:38:12.692000","deleted":false,"description":"","gadget-details":[{"beats":72,"color":"#2f9aef","created":"2025-10-10 13:41:19.236000","deleted":false,"description":"","id":864589,"idata":{"author":"Anonymous","cloned":false,"displayOrder":2,"editor-theme":"tunepad-dark","gain":1,"hasError":false,"midi-input":false,"midi-output":false,"minimized":false,"pan":0,"patchId":1,"python":"from tunepad.constants import *  # Import for QUARTER_NOTE=1, EIGHTH_NOTE=0.5, etc. (standardizes durations)\nfrom tunepad.chords import *  # Optional: For easier chord progressions, but using custom here\nimport random  # For variation\n\ndef set_mood_params(mood):\n    if mood.lower() == 'energetic':\n        chords = [[60, 64, 67], [65, 69, 72], [67, 71, 74]]  # C major: I, IV, V (cheerful, fun triads)\n        scale = [60, 62, 64, 65, 67, 69, 71, 72]  # C major scale (bright, whimsical)\n        volume = 110  # Bright for fun\n        drum_intensity = 95  # Playful drive\n    return chords, scale, volume, drum_intensity\n\n# Hardcode mood for this cell\nmood = 'energetic'\nchords, scale, volume, drum_intensity = set_mood_params(mood)\nprint(\"Playing Energetic Mood Music - Humorous & playful version...\")\nprint(\"Set UI BPM to 160, Instrument to 'xylophone' or 'clarinet' for melody, 'acoustic bass' for harmony, and 'latin kit' for drums!\")\n\n# Simulate layers sequentially: Drum + Melody + Harmony\nfor i in range(80):  # 80 loops for ~40 beats total (~15s at BPM=160)\n    # Drum layer: Fun, bouncy beats (syncopated groove with whimsical perc)\n    beat_in_measure = i % 4  # Cycle for base rhythm\n    current_drum_intensity = drum_intensity + random.randint(-10, 10)  # Mild vary 85-105 for light fun\n    if beat_in_measure == 0 or beat_in_measure == 2:  # Steady kicks on 1 and 3 for bounce\n        playNote(36, beats=EIGHTH_NOTE / 2, velocity=current_drum_intensity, sustain=0.1)  # Short bass kick (0.25 beats, quick)\n    if (beat_in_measure == 0.5 or beat_in_measure == 2.5) or random.random() > 0.85:  # Syncopated off-beats (imagined half-beats) + rare extra for \"wink\"\n        playNote(42, beats=SIXTEENTH_NOTE, velocity=current_drum_intensity * 0.8, sustain=0.05)  # Hi-hat tickle (playful)\n    if i % 8 == 4 or random.random() > 0.8:  # Mid-measure + random woodblock/cowbell for humorous \"boing\" surprise\n        playNote(56, beats=EIGHTH_NOTE / 2, velocity=100, sustain=0.2)  # Cowbell or woodblock ding (fun accent)\n\n    # Melody layer: Playful, leaping with humorous twists (small positive jumps, occasional \"surprise\" high note)\n    base_note_index = i % len(scale)  # Cycle scale smoothly\n    note_offset = random.randint(0, 7)  # Small positive jumps for cheerful arcs (no chaos/negatives)\n    note = scale[base_note_index] + 12 + note_offset  # Octave + fun variation\n    if random.random() > 0.85:  # 15% chance add whimsical high \"pop\" (octave up or gliss-like)\n        note += random.choice([12, 19])  # Octave or twelfth for \"hee-hee\" surprise\n    duration = random.choice([SIXTEENTH_NOTE, EIGHTH_NOTE])  # Fast but bouncy notes (0.25 or 0.5 beats)\n    current_volume = volume * random.uniform(0.9, 1.0)  # Subtle vary for liveliness\n    playNote(note, beats=duration, velocity=current_volume, sustain=0.25)  # Short sustain for perky pops\n\n    # Harmony layer: Light, supportive chords (short and sweet for rhythmic fun)\n    if beat_in_measure == 0 or random.random() > 0.75:  # On downbeat + occasional (~25% for playful layering)\n        chord_notes = random.choice(chords)\n        chord_volume = volume * random.uniform(0.85, 0.95)  # Gentle fun dynamics\n        playNote(chord_notes, beats=EIGHTH_NOTE, velocity=chord_volume, sustain=0.3)  # Short chord bounces (0.5 beats)\n\n    # Minimal rest with occasional \"pause for punchline\"\n    if random.random() > 0.85:  # 15% chance for short humorous pause (like comic timing)\n        rest(EIGHTH_NOTE / 2)  # Moderate ~0.25 beats for \"build-up\"\n    else:\n        rest(0)  # No rest most times for steady whimsy\n\n    # Debug: Print every 10 loops\n    if i % 10 == 0:\n        print(\"Loop %d: Current playhead ~%.1f beats\" % (i, getPlayhead()))\n\nprint(\"Finished! Final playhead: %.1f beats\" % getPlayhead())\n# New TunePad cell\n\n\n\n","show-editor":true,"show-instrument":true,"show-notation":true,"show-output":false,"show-timeline":true},"instrument":"bass","modified":"2025-10-18 04:48:10.743000","name":"energetic_Guitar","public":false,"remix_parent":null,"version":"2.0","voice":"piano"},{"beats":72,"color":"#2f9aef","created":"2025-10-12 10:16:50.882000","deleted":false,"description":"","id":864986,"idata":{"author":"Anonymous","cloned":false,"displayOrder":3,"editor-theme":"tunepad-dark","gain":1,"hasError":false,"midi-input":false,"midi-output":false,"minimized":false,"pan":0,"patchId":9,"python":"from tunepad.constants import *  # Import for QUARTER_NOTE=1, EIGHTH_NOTE=0.5, etc. (standardizes durations)\nfrom tunepad.chords import *  # Optional: For easier chord progressions, but using custom here\nimport random  # For variation\n\ndef set_mood_params(mood):\n    if mood.lower() == 'energetic':\n        chords = [[60, 64, 67], [65, 69, 72], [67, 71, 74]]  # C major: I, IV, V (cheerful, fun triads)\n        scale = [60, 62, 64, 65, 67, 69, 71, 72]  # C major scale (bright, whimsical)\n        volume = 110  # Bright for fun\n        drum_intensity = 95  # Playful drive\n    return chords, scale, volume, drum_intensity\n\n# Hardcode mood for this cell\nmood = 'energetic'\nchords, scale, volume, drum_intensity = set_mood_params(mood)\nprint(\"Playing Energetic Mood Music - Humorous & playful version...\")\nprint(\"Set UI BPM to 160, Instrument to 'xylophone' or 'clarinet' for melody, 'acoustic bass' for harmony, and 'latin kit' for drums!\")\n\n# Simulate layers sequentially: Drum + Melody + Harmony\nfor i in range(80):  # 80 loops for ~40 beats total (~15s at BPM=160)\n    # Drum layer: Fun, bouncy beats (syncopated groove with whimsical perc)\n    beat_in_measure = i % 4  # Cycle for base rhythm\n    current_drum_intensity = drum_intensity + random.randint(-10, 10)  # Mild vary 85-105 for light fun\n    if beat_in_measure == 0 or beat_in_measure == 2:  # Steady kicks on 1 and 3 for bounce\n        playNote(36, beats=EIGHTH_NOTE / 2, velocity=current_drum_intensity, sustain=0.1)  # Short bass kick (0.25 beats, quick)\n    if (beat_in_measure == 0.5 or beat_in_measure == 2.5) or random.random() > 0.85:  # Syncopated off-beats (imagined half-beats) + rare extra for \"wink\"\n        playNote(42, beats=SIXTEENTH_NOTE, velocity=current_drum_intensity * 0.8, sustain=0.05)  # Hi-hat tickle (playful)\n    if i % 8 == 4 or random.random() > 0.8:  # Mid-measure + random woodblock/cowbell for humorous \"boing\" surprise\n        playNote(56, beats=EIGHTH_NOTE / 2, velocity=100, sustain=0.2)  # Cowbell or woodblock ding (fun accent)\n\n    # Melody layer: Playful, leaping with humorous twists (small positive jumps, occasional \"surprise\" high note)\n    base_note_index = i % len(scale)  # Cycle scale smoothly\n    note_offset = random.randint(0, 7)  # Small positive jumps for cheerful arcs (no chaos/negatives)\n    note = scale[base_note_index] + 12 + note_offset  # Octave + fun variation\n    if random.random() > 0.85:  # 15% chance add whimsical high \"pop\" (octave up or gliss-like)\n        note += random.choice([12, 19])  # Octave or twelfth for \"hee-hee\" surprise\n    duration = random.choice([SIXTEENTH_NOTE, EIGHTH_NOTE])  # Fast but bouncy notes (0.25 or 0.5 beats)\n    current_volume = volume * random.uniform(0.9, 1.0)  # Subtle vary for liveliness\n    playNote(note, beats=duration, velocity=current_volume, sustain=0.25)  # Short sustain for perky pops\n\n    # Harmony layer: Light, supportive chords (short and sweet for rhythmic fun)\n    if beat_in_measure == 0 or random.random() > 0.75:  # On downbeat + occasional (~25% for playful layering)\n        chord_notes = random.choice(chords)\n        chord_volume = volume * random.uniform(0.85, 0.95)  # Gentle fun dynamics\n        playNote(chord_notes, beats=EIGHTH_NOTE, velocity=chord_volume, sustain=0.3)  # Short chord bounces (0.5 beats)\n\n    # Minimal rest with occasional \"pause for punchline\"\n    if random.random() > 0.85:  # 15% chance for short humorous pause (like comic timing)\n        rest(EIGHTH_NOTE / 2)  # Moderate ~0.25 beats for \"build-up\"\n    else:\n        rest(0)  # No rest most times for steady whimsy\n\n    # Debug: Print every 10 loops\n    if i % 10 == 0:\n        print(\"Loop %d: Current playhead ~%.1f beats\" % (i, getPlayhead()))\n\nprint(\"Finished! Final playhead: %.1f beats\" % getPlayhead())\n# New TunePad cell\n\n\n\n","show-editor":true,"show-instrument":true,"show-notation":true,"show-output":false,"show-timeline":true},"instrument":"piano","modified":"2025-10-18 04:57:55.893000","name":"energetic_Piano","public":false,"remix_parent":null,"version":"2.0","voice":"piano"},{"beats":72,"color":"#2f9aef","created":"2025-10-12 10:18:34.754000","deleted":false,"description":"","id":864987,"idata":{"author":"Anonymous","cloned":false,"displayOrder":1,"editor-theme":"tunepad-dark","gain":1,"hasError":false,"midi-input":false,"midi-output":false,"minimized":false,"pan":0,"patchId":11,"python":"from tunepad.constants import *  # Import for QUARTER_NOTE=1, EIGHTH_NOTE=0.5, etc. (standardizes durations)\nfrom tunepad.chords import *  # Optional: For easier chord progressions, but using custom here\nimport random  # For variation\n\ndef set_mood_params(mood):\n    if mood.lower() == 'energetic':\n        chords = [[60, 64, 67], [65, 69, 72], [67, 71, 74]]  # C major: I, IV, V (cheerful, fun triads)\n        scale = [60, 62, 64, 65, 67, 69, 71, 72]  # C major scale (bright, whimsical)\n        volume = 110  # Bright for fun\n        drum_intensity = 95  # Playful drive\n    return chords, scale, volume, drum_intensity\n\n# Hardcode mood for this cell\nmood = 'energetic'\nchords, scale, volume, drum_intensity = set_mood_params(mood)\nprint(\"Playing Energetic Mood Music - Humorous & playful version...\")\nprint(\"Set UI BPM to 160, Instrument to 'xylophone' or 'clarinet' for melody, 'acoustic bass' for harmony, and 'latin kit' for drums!\")\n\n# Simulate layers sequentially: Drum + Melody + Harmony\nfor i in range(80):  # 80 loops for ~40 beats total (~15s at BPM=160)\n    # Drum layer: Fun, bouncy beats (syncopated groove with whimsical perc)\n    beat_in_measure = i % 4  # Cycle for base rhythm\n    current_drum_intensity = drum_intensity + random.randint(-10, 10)  # Mild vary 85-105 for light fun\n    if beat_in_measure == 0 or beat_in_measure == 2:  # Steady kicks on 1 and 3 for bounce\n        playNote(36, beats=EIGHTH_NOTE / 2, velocity=current_drum_intensity, sustain=0.1)  # Short bass kick (0.25 beats, quick)\n    if (beat_in_measure == 0.5 or beat_in_measure == 2.5) or random.random() > 0.85:  # Syncopated off-beats (imagined half-beats) + rare extra for \"wink\"\n        playNote(42, beats=SIXTEENTH_NOTE, velocity=current_drum_intensity * 0.8, sustain=0.05)  # Hi-hat tickle (playful)\n    if i % 8 == 4 or random.random() > 0.8:  # Mid-measure + random woodblock/cowbell for humorous \"boing\" surprise\n        playNote(56, beats=EIGHTH_NOTE / 2, velocity=100, sustain=0.2)  # Cowbell or woodblock ding (fun accent)\n\n    # Melody layer: Playful, leaping with humorous twists (small positive jumps, occasional \"surprise\" high note)\n    base_note_index = i % len(scale)  # Cycle scale smoothly\n    note_offset = random.randint(0, 7)  # Small positive jumps for cheerful arcs (no chaos/negatives)\n    note = scale[base_note_index] + 12 + note_offset  # Octave + fun variation\n    if random.random() > 0.85:  # 15% chance add whimsical high \"pop\" (octave up or gliss-like)\n        note += random.choice([12, 19])  # Octave or twelfth for \"hee-hee\" surprise\n    duration = random.choice([SIXTEENTH_NOTE, EIGHTH_NOTE])  # Fast but bouncy notes (0.25 or 0.5 beats)\n    current_volume = volume * random.uniform(0.9, 1.0)  # Subtle vary for liveliness\n    playNote(note, beats=duration, velocity=current_volume, sustain=0.25)  # Short sustain for perky pops\n\n    # Harmony layer: Light, supportive chords (short and sweet for rhythmic fun)\n    if beat_in_measure == 0 or random.random() > 0.75:  # On downbeat + occasional (~25% for playful layering)\n        chord_notes = random.choice(chords)\n        chord_volume = volume * random.uniform(0.85, 0.95)  # Gentle fun dynamics\n        playNote(chord_notes, beats=EIGHTH_NOTE, velocity=chord_volume, sustain=0.3)  # Short chord bounces (0.5 beats)\n\n    # Minimal rest with occasional \"pause for punchline\"\n    if random.random() > 0.85:  # 15% chance for short humorous pause (like comic timing)\n        rest(EIGHTH_NOTE / 2)  # Moderate ~0.25 beats for \"build-up\"\n    else:\n        rest(0)  # No rest most times for steady whimsy\n\n    # Debug: Print every 10 loops\n    if i % 10 == 0:\n        print(\"Loop %d: Current playhead ~%.1f beats\" % (i, getPlayhead()))\n\nprint(\"Finished! Final playhead: %.1f beats\" % getPlayhead())\n# New TunePad cell\n\n\n\n","show-editor":true,"show-instrument":true,"show-notation":true,"show-output":false,"show-timeline":true},"instrument":"drums","modified":"2025-10-18 04:57:52.302000","name":"energetic_808drumkit","public":false,"remix_parent":null,"version":"2.0","voice":"piano"}],"id":116482,"import_export_version":1,"meter":"4/4","modified":"2025-10-10 13:41:14.413000","name":"emotional_music_energetic","preview":null,"pucks":{"key":"C major","owner_id":"0e386bf3-ef4e-416c-86fa-1ccfad2159a8"},"remix_parent":null,"summary":"","tags":[],"tracks":[],"user_id":"0e386bf3-ef4e-416c-86fa-1ccfad2159a8","username":"tzjtzj777@outlook.com","visibility":"private"}