{"artwork":null,"bars":20,"bpm":120,"collaborative":false,"color":"#5bc6fc","created":"2025-10-10 13:42:58.707000","deleted":false,"description":"","gadget-details":[{"beats":92,"color":"#2f9aef","created":"2025-10-10 13:45:56.179000","deleted":false,"description":"","id":864590,"idata":{"author":"Anonymous","cloned":false,"displayOrder":2,"editor-theme":"tunepad-dark","gain":1,"hasError":false,"midi-input":false,"midi-output":false,"minimized":false,"pan":0,"patchId":2,"python":"from tunepad.constants import *  # Import constants for beat durations\nfrom tunepad.chords import *     # Import chord functions\nimport random                    # For variation in notes and rhythms\n\n# Function to set mood-specific parameters\ndef set_mood_params(mood):\n    if mood.lower() == 'happy':  # Case-insensitive check\n        chords = [[48, 52, 55], [53, 57, 60], [55, 59, 62]]  # Major chords\n        scale = [48, 50, 52, 53, 55, 57, 59, 60]             # C major scale\n        volume = 100                                         # Base volume\n        drum_intensity = 90                                  # Drum intensity\n    return chords, scale, volume, drum_intensity\n\n# Set mood and unpack parameters\nmood = 'happy'\nchords, scale, volume, drum_intensity = set_mood_params(mood)\n\n# User guidance prints\nprint(\"Playing Happy Mood Music - Electric Bass version...\")\nprint(\"Set UI BPM to 120, Instrument to 'electric bass' for melody/harmony, and 'standard kit' for drums!\")\n\n# Main loop for composition (40 iterations for ~20-30s music)\nfor i in range(40):\n    beat_in_measure = i % 4  # Track beat position\n    \n    # Dynamic drum intensity\n    current_drum_intensity = drum_intensity + random.randint(-10, 10)\n    \n    # Drums: Bass on downbeats\n    if beat_in_measure == 0 or beat_in_measure == 2:\n        playNote(36, beats=QUARTER_NOTE / 2, velocity=current_drum_intensity, sustain=0.2)\n    \n    # Snare on off-beats or randomly\n    if beat_in_measure == 1 or beat_in_measure == 3 or random.random() > 0.75:\n        playNote(38, beats=EIGHTH_NOTE, velocity=current_drum_intensity * 0.9, sustain=0.1)\n    \n    # Hi-hat every quarter\n    if i % 4 == 0:\n        playNote(42, beats=SIXTEENTH_NOTE, velocity=current_drum_intensity * 0.85, sustain=0.1)\n    \n    # Occasional crash\n    if i % 8 == 0 and random.random() > 0.7:\n        playNote(49, beats=QUARTER_NOTE, velocity=100, sustain=0.3)\n    \n    # Melody: Cyclic base note with offset\n    base_note_index = i % len(scale)\n    note_offset = random.randint(0, 7)\n    note = scale[base_note_index] + note_offset\n    \n    # Rare jumps\n    if random.random() > 0.9:\n        note += random.choice([4, 7])\n    \n    # Random duration and volume\n    duration = random.choice([EIGHTH_NOTE, QUARTER_NOTE])\n    current_volume = volume * random.uniform(0.9, 1.0)\n    playNote(note, beats=duration, velocity=current_volume, sustain=0.5)\n    \n    # Harmony: Chords on downbeats or randomly\n    if beat_in_measure == 0 or random.random() > 0.7:\n        chord_notes = random.choice(chords)\n        chord_volume = volume * random.uniform(0.8, 1.0)\n        playNote(chord_notes, beats=HALF_NOTE, velocity=chord_volume, sustain=0.7)\n    \n    # Occasional rest\n    if random.random() > 0.8:\n        rest(SIXTEENTH_NOTE)\n    else:\n        rest(0)\n    \n    # Debug print every 10 loops\n    if i % 10 == 0:\n        print(\"Loop %d: Current playhead ~%.1f beats\" % (i, getPlayhead()))\n\n# Completion print\nprint(\"Finished! Final playhead: %.1f beats\" % getPlayhead())\n","show-editor":true,"show-instrument":true,"show-notation":true,"show-output":false,"show-timeline":true},"instrument":"guitar","modified":"2025-10-21 02:03:04.692000","name":"happy_Guitar","public":false,"remix_parent":null,"version":"2.0","voice":"piano"},{"beats":100,"color":"#2f9aef","created":"2025-10-12 10:21:08.282000","deleted":false,"description":"","id":864988,"idata":{"author":"Anonymous","cloned":false,"displayOrder":3,"editor-theme":"tunepad-dark","gain":1,"hasError":false,"midi-input":false,"midi-output":false,"minimized":false,"pan":0,"patchId":9,"python":"from tunepad.constants import *  # Import constants for beat durations\nfrom tunepad.chords import *     # Import chord functions\nimport random                    # For variation in notes and rhythms\n\n# Function to set mood-specific parameters\ndef set_mood_params(mood):\n    if mood.lower() == 'happy':  # Case-insensitive check\n        chords = [[48, 52, 55], [53, 57, 60], [55, 59, 62]]  # Major chords\n        scale = [48, 50, 52, 53, 55, 57, 59, 60]             # C major scale\n        volume = 100                                         # Base volume\n        drum_intensity = 90                                  # Drum intensity\n    return chords, scale, volume, drum_intensity\n\n# Set mood and unpack parameters\nmood = 'happy'\nchords, scale, volume, drum_intensity = set_mood_params(mood)\n\n# User guidance prints\nprint(\"Playing Happy Mood Music - Electric Bass version...\")\nprint(\"Set UI BPM to 120, Instrument to 'electric bass' for melody/harmony, and 'standard kit' for drums!\")\n\n# Main loop for composition (40 iterations for ~20-30s music)\nfor i in range(40):\n    beat_in_measure = i % 4  # Track beat position\n    \n    # Dynamic drum intensity\n    current_drum_intensity = drum_intensity + random.randint(-10, 10)\n    \n    # Drums: Bass on downbeats\n    if beat_in_measure == 0 or beat_in_measure == 2:\n        playNote(36, beats=QUARTER_NOTE / 2, velocity=current_drum_intensity, sustain=0.2)\n    \n    # Snare on off-beats or randomly\n    if beat_in_measure == 1 or beat_in_measure == 3 or random.random() > 0.75:\n        playNote(38, beats=EIGHTH_NOTE, velocity=current_drum_intensity * 0.9, sustain=0.1)\n    \n    # Hi-hat every quarter\n    if i % 4 == 0:\n        playNote(42, beats=SIXTEENTH_NOTE, velocity=current_drum_intensity * 0.85, sustain=0.1)\n    \n    # Occasional crash\n    if i % 8 == 0 and random.random() > 0.7:\n        playNote(49, beats=QUARTER_NOTE, velocity=100, sustain=0.3)\n    \n    # Melody: Cyclic base note with offset\n    base_note_index = i % len(scale)\n    note_offset = random.randint(0, 7)\n    note = scale[base_note_index] + note_offset\n    \n    # Rare jumps\n    if random.random() > 0.9:\n        note += random.choice([4, 7])\n    \n    # Random duration and volume\n    duration = random.choice([EIGHTH_NOTE, QUARTER_NOTE])\n    current_volume = volume * random.uniform(0.9, 1.0)\n    playNote(note, beats=duration, velocity=current_volume, sustain=0.5)\n    \n    # Harmony: Chords on downbeats or randomly\n    if beat_in_measure == 0 or random.random() > 0.7:\n        chord_notes = random.choice(chords)\n        chord_volume = volume * random.uniform(0.8, 1.0)\n        playNote(chord_notes, beats=HALF_NOTE, velocity=chord_volume, sustain=0.7)\n    \n    # Occasional rest\n    if random.random() > 0.8:\n        rest(SIXTEENTH_NOTE)\n    else:\n        rest(0)\n    \n    # Debug print every 10 loops\n    if i % 10 == 0:\n        print(\"Loop %d: Current playhead ~%.1f beats\" % (i, getPlayhead()))\n\n# Completion print\nprint(\"Finished! Final playhead: %.1f beats\" % getPlayhead())\n","show-editor":true,"show-instrument":true,"show-notation":true,"show-output":false,"show-timeline":true},"instrument":"piano","modified":"2025-10-21 02:05:42.387000","name":"happy_Piano","public":false,"remix_parent":null,"version":"2.0","voice":"piano"},{"beats":92,"color":"#2f9aef","created":"2025-10-12 10:22:10.676000","deleted":false,"description":"","id":864989,"idata":{"author":"Anonymous","cloned":false,"displayOrder":1,"editor-theme":"tunepad-dark","gain":1,"hasError":false,"midi-input":false,"midi-output":false,"minimized":false,"pan":0,"patchId":1,"python":"from tunepad.constants import *  # Import constants for beat durations\nfrom tunepad.chords import *     # Import chord functions\nimport random                    # For variation in notes and rhythms\n\n# Function to set mood-specific parameters\ndef set_mood_params(mood):\n    if mood.lower() == 'happy':  # Case-insensitive check\n        chords = [[48, 52, 55], [53, 57, 60], [55, 59, 62]]  # Major chords\n        scale = [48, 50, 52, 53, 55, 57, 59, 60]             # C major scale\n        volume = 100                                         # Base volume\n        drum_intensity = 90                                  # Drum intensity\n    return chords, scale, volume, drum_intensity\n\n# Set mood and unpack parameters\nmood = 'happy'\nchords, scale, volume, drum_intensity = set_mood_params(mood)\n\n# User guidance prints\nprint(\"Playing Happy Mood Music - Electric Bass version...\")\nprint(\"Set UI BPM to 120, Instrument to 'electric bass' for melody/harmony, and 'standard kit' for drums!\")\n\n# Main loop for composition (40 iterations for ~20-30s music)\nfor i in range(40):\n    beat_in_measure = i % 4  # Track beat position\n    \n    # Dynamic drum intensity\n    current_drum_intensity = drum_intensity + random.randint(-10, 10)\n    \n    # Drums: Bass on downbeats\n    if beat_in_measure == 0 or beat_in_measure == 2:\n        playNote(36, beats=QUARTER_NOTE / 2, velocity=current_drum_intensity, sustain=0.2)\n    \n    # Snare on off-beats or randomly\n    if beat_in_measure == 1 or beat_in_measure == 3 or random.random() > 0.75:\n        playNote(38, beats=EIGHTH_NOTE, velocity=current_drum_intensity * 0.9, sustain=0.1)\n    \n    # Hi-hat every quarter\n    if i % 4 == 0:\n        playNote(42, beats=SIXTEENTH_NOTE, velocity=current_drum_intensity * 0.85, sustain=0.1)\n    \n    # Occasional crash\n    if i % 8 == 0 and random.random() > 0.7:\n        playNote(49, beats=QUARTER_NOTE, velocity=100, sustain=0.3)\n    \n    # Melody: Cyclic base note with offset\n    base_note_index = i % len(scale)\n    note_offset = random.randint(0, 7)\n    note = scale[base_note_index] + note_offset\n    \n    # Rare jumps\n    if random.random() > 0.9:\n        note += random.choice([4, 7])\n    \n    # Random duration and volume\n    duration = random.choice([EIGHTH_NOTE, QUARTER_NOTE])\n    current_volume = volume * random.uniform(0.9, 1.0)\n    playNote(note, beats=duration, velocity=current_volume, sustain=0.5)\n    \n    # Harmony: Chords on downbeats or randomly\n    if beat_in_measure == 0 or random.random() > 0.7:\n        chord_notes = random.choice(chords)\n        chord_volume = volume * random.uniform(0.8, 1.0)\n        playNote(chord_notes, beats=HALF_NOTE, velocity=chord_volume, sustain=0.7)\n    \n    # Occasional rest\n    if random.random() > 0.8:\n        rest(SIXTEENTH_NOTE)\n    else:\n        rest(0)\n    \n    # Debug print every 10 loops\n    if i % 10 == 0:\n        print(\"Loop %d: Current playhead ~%.1f beats\" % (i, getPlayhead()))\n\n# Completion print\nprint(\"Finished! Final playhead: %.1f beats\" % getPlayhead())\n","show-editor":true,"show-instrument":true,"show-notation":true,"show-output":false,"show-timeline":true},"instrument":"bass","modified":"2025-10-21 02:02:28.064000","name":"happy_Electirc_bass","public":false,"remix_parent":null,"version":"2.0","voice":"piano"}],"id":116483,"import_export_version":1,"meter":"4/4","modified":"2025-10-10 13:45:52.411000","name":"emotional_music_happy","preview":null,"pucks":{"key":"C major","owner_id":"0e386bf3-ef4e-416c-86fa-1ccfad2159a8"},"remix_parent":null,"summary":"","tags":[],"tracks":[],"user_id":"0e386bf3-ef4e-416c-86fa-1ccfad2159a8","username":"tzjtzj777@outlook.com","visibility":"private"}
